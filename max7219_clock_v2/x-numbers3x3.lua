local numbers3x8 = {
    { 0x00, 0x38, 0x28, 0x38, 0x00, 0x00, 0x00, 0x00 }, -- 0
--  { 0x00, 0x00, 0x00, 0x07, 0x05, 0x07, 0x00, 0x00 }, -- 0
    { 0x00, 0x28, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00 }, -- 1
--  { 0x00, 0x05, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00 }, -- 1
    { 0x00, 0x08, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00 }, -- 2
--  { 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00 }, -- 2
    { 0x00, 0x28, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00 }, -- 3 
--  { 0x00, 0x05, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00 }, -- 3
    { 0x00, 0x18, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00 }, -- 4
--  { 0x00, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00 }, -- 4
    { 0x00, 0x20, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00 }, -- 5
--  { 0x00, 0x04, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00 }, -- 5
    { 0x00, 0x38, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00 }, -- 6
--  { 0x00, 0x07, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00 }, -- 6
    { 0x00, 0x08, 0x08, 0x38, 0x00, 0x00, 0x00, 0x00 }, -- 7
--  { 0x00, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00 }, -- 7
    { 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00 }, -- 8
--  { 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00 }, -- 8
    { 0x00, 0x18, 0x18, 0x38, 0x00, 0x00, 0x00, 0x00 }  -- 9
--  { 0x00, 0x03, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00 }  -- 9
}

local numbers3x4 = {
    { 0x00, 0x38, 0x28, 0x38 }, -- 0
    { 0x00, 0x28, 0x38, 0x20 }, -- 1
    { 0x00, 0x08, 0x38, 0x20 }, -- 2
    { 0x00, 0x28, 0x38, 0x10 }, -- 3 
    { 0x00, 0x18, 0x10, 0x38 }, -- 4
    { 0x00, 0x20, 0x38, 0x08 }, -- 5
    { 0x00, 0x38, 0x30, 0x30 }, -- 6
    { 0x00, 0x08, 0x08, 0x38 }, -- 7
    { 0x00, 0x38, 0x38, 0x38 }, -- 8
    { 0x00, 0x18, 0x18, 0x38 }, -- 9
    { 0x00, 0x00, 0x00, 0x00 }  -- : (empty)
}

function GetNumbers3x8(number)
  return numbers3x8[string.byte(number)-47]
end


function GetNumbers3x4(number)
    local PrintLine = {}
  
    -- clean up array
--    if (#PrintLine > 0) then
--        for i=1,#PrintLine do
--            table.remove(PrintLine)
--        end    
--    end
  
    for symbol in string.gmatch(number, ".") do
        for i=1,#numbers3x4[string.byte(symbol)-47] do
            table.insert(PrintLine, numbers3x4[string.byte(symbol)-47][i])
        end
    end

   if (#PrintLine < 8) then
      for i=1,#numbers3x4[1] do
         table.insert(PrintLine, i, numbers3x4[1][i])
      end
   end
    print ("Return: " .. #PrintLine .. " index(es)")
    return PrintLine
end


function Numbers3x4(line)  
   local PrintLine = {}
   --print ("Font3x4 line has " .. #line .. " symbol(s)")
   --print ("Font3x4 incoming array has " .. #GetNumbers3x4(line) .. " index(es)")
   
   if (#line < 3 ) then
      table.insert(PrintLine, GetNumbers3x4(line))
   else
      local Numbers = {}
      local NewNumbers = {}
      for symbol in line:gmatch(".") do
          table.insert(Numbers, symbol)
      end
      --print("Font3x4 Numbers has " .. #Numbers .. " index(es)")
      if (#Numbers == 3 or #Numbers == 5 or #Numbers == 7)  then
         table.insert(Numbers, ":")
      end

      local index = 1
      while (index < #Numbers) do
         table.insert(NewNumbers, Numbers[index] .. Numbers[index+1])
         table.insert(PrintLine, GetNumbers3x4(Numbers[index] .. Numbers[index+1]))
         index = index + 2 
      end
    end 
   --print("Font3x4 PrintLine has " .. #PrintLine .. " array(s)")
   return PrintLine
end
