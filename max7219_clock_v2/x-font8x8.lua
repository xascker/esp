local font8x8 = {
{},--0x00
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},
{},--0x1F
{0x00, 0x00},--' '
{},--!
{},--"
{},--#
{},--$
{},--%
{},--&
{},--'
{0x3C, 0x42, 0xA5, 0x91, 0x91, 0xA5, 0x42, 0x3C},--(
{0x3C, 0x42, 0x95, 0xA1, 0xA1, 0x95, 0x42, 0x3C},--)
{},--*
{0x08,0x08,0x3E,0x3E,0x08,0x08,0x00,0x00},--+
{},--,
{0x08,0x08,0x08,0x08,0x00},---
{},--.
{},--/
{0x3E,0x7F,0x71,0x59,0x4D,0x7F,0x3E,0x00 },--0
{0x40,0x42,0x7F,0x7F,0x40,0x40,0x00, },--1
{0x62,0x73,0x59,0x49,0x6F,0x66,0x00, },--2
{0x22,0x63,0x49,0x49,0x7F,0x36,0x00, },--3
{0x18,0x1C,0x16,0x53,0x7F,0x7F,0x50,0x00 },--4
{0x27,0x67,0x45,0x45,0x7D,0x39,0x00,},--5
{0x3C,0x7E,0x4B,0x49,0x79,0x30,0x00,},--6
{0x03,0x03,0x71,0x79,0x0F,0x07,0x00, },--7
{0x36,0x7F,0x49,0x49,0x7F,0x36,0x00, },--8
{0x06,0x4F,0x49,0x69,0x3F,0x1E,0x00, },--9
{0x66,0x66,0x00 },--:
--{0x00,0x00,0x66,0x66,0x00,0x00,0x00,0x00 },--:
{},--;
{},--<
{},--=
{},-->
{},--?
{},--@
{},--A
{},--B
{},--C
{},--D
{},--E
{},--F
{},--G
{},--H
{},--I
{},--J
{},--K
{},--L
{},--M
{},--N
{},--O
{},--P
{},--Q
{},--R
{},--S
{},--T
{},--U
{},--V
{},--W
{},--X
{},--Y
{},--Z
{},--[
{},--\
{},--]
{},--^
{},--_
{},--`
{0x20,0x74,0x54,0x54,0x3C,0x78,0x40,0x00 },--a
{0x41,0x7F,0x3F,0x48,0x48,0x78,0x30,0x00 },--b
{0x38,0x7C,0x44,0x44,0x6C,0x28,0x00 },--c
{0x30,0x78,0x48,0x49,0x3F,0x7F,0x40,0x00 },--d
{0x38,0x7C,0x54,0x54,0x5C,0x18,0x00 },--e
{0x48,0x7E,0x7F,0x49,0x03,0x02,0x00 },--f
{0x98,0xBC,0xA4,0xA4,0xF8,0x7C,0x04,0x00 },--g
{0x41,0x7F,0x7F,0x08,0x04,0x7C,0x78,0x00 },--h
{0x44,0x7D,0x7D,0x40,0x00 },--i
{0x60,0xE0,0x80,0x80,0xFD,0x7D,0x00 },--j
{0x41,0x7F,0x7F,0x10,0x38,0x6C,0x44,0x00 },--k
{0x41,0x7F,0x7F,0x40,0x00 },--l
{0x7C,0x7C,0x18,0x38,0x1C,0x7C,0x78,0x00 },--m
{0x7C,0x7C,0x04,0x04,0x7C,0x78,0x00 },--n
{0x38,0x7C,0x44,0x44,0x7C,0x38,0x00 },--o
{0x84,0xFC,0xF8,0xA4,0x24,0x3C,0x18,0x00 },--p
{0x18,0x3C,0x24,0xA4,0xF8,0xFC,0x84,0x00 },--q
{0x44,0x7C,0x78,0x4C,0x04,0x1C,0x18,0x00 },--r
{0x48,0x5C,0x54,0x54,0x74,0x24,0x00 },--s
{0x04,0x3E,0x7F,0x44,0x24,0x00 },--t
{0x3C,0x7C,0x40,0x40,0x3C,0x7C,0x40,0x00 },--u
{0x1C,0x3C,0x60,0x60,0x3C,0x1C,0x00 },--v
{0x3C,0x7C,0x70,0x38,0x70,0x7C,0x3C,0x00 },--w
{0x44,0x6C,0x38,0x10,0x38,0x6C,0x44,0x00 },--x
{0x9C,0xBC,0xA0,0xA0,0xFC,0x7C,0x00 },--y
{0x4C,0x64,0x74,0x5C,0x4C,0x64,0x00 },--z
{},--'
{},--|
{},--}
{}--~
}

function GetChar(char)
  --collectgarbage()
  return font8x8[string.byte (char, 1)+1]
end

function Font8x8(line)  
   local PrintLine = {}
   for symbol in string.gmatch(line, ".") do
      table.insert(PrintLine, GetChar(symbol))
   end
--   print("Font8x8 PrintLine has " .. #PrintLine .. " array(s)")
   return PrintLine
end

function PrintFont8x8(line, modules, scroll, center)
    local PrintLine = {} 
    local mArray =  {{},{},{},{}} -- for 4 modules
    local n = 0
    
    for symbol in line:gmatch(".") do
        for i=1,#font8x8[string.byte(symbol)+1] do
            table.insert(PrintLine, font8x8[string.byte(symbol)+1][i])
        end
    end

    if center then
       local i = 1
       while (#PrintLine < modules*8) do
          table.insert(PrintLine, i, 0x00)
          table.insert(PrintLine, 0x00)
          i = i + 1
       end
    else
       while (#PrintLine < modules*8) do
          table.insert(PrintLine, 0x00)
       end
   end
    
    if scroll then
       return PrintLine
    else
       for j=1,modules do
          for i=1,8 do
             table.insert(mArray[j], PrintLine[i+n])
          end
          tmr.delay(50)
          n = n + 8
       end
       return mArray
    end
end
